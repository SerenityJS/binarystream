/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class BinaryStream {
  constructor(buffer: Buffer, offset?: number | undefined | null)
  /**
   * Returns the current offset in the stream.
   */
  getOffset(): number
  /**
   * Sets the current offset in the stream.
   * If the offset is out of bounds, it returns an error.
   */
  setOffset(offset: number): void
  write(data: Buffer): void
  read(length: number): Buffer
  /**
   * Checks if the stream has reached the end of the buffer.
   */
  feof(): boolean
  /**
   * Resets the stream's offset to the beginning of the buffer.
   */
  reset(): void
}

export declare class Bool {
  /**
   * Read a boolean value (u8) from the BinaryStream.
   */
  static read(stream: BinaryStream): boolean
  /**
   * Write a boolean value (u8) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: boolean): void
}

export declare class Float32 {
  /**
   * Read a 32-bit floating point number (f32) from the BinaryStream.
   */
  static read(stream: BinaryStream, endian?: Endianness | undefined | null): number
  /**
   * Write a 32-bit floating point number (f32) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: number, endian?: Endianness | undefined | null): void
}

export declare class Float64 {
  /**
   * Read a 64-bit floating point number (f64) from the BinaryStream.
   */
  static read(stream: BinaryStream, endian?: Endianness | undefined | null): number
  /**
   * Write a 64-bit floating point number (f64) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: number, endian?: Endianness | undefined | null): void
}

export declare class Int16 {
  /**
   * Read a unsigned 16-bit integer (i16) from the BinaryStream.
   */
  static read(stream: BinaryStream, endian?: Endianness | undefined | null): number
  /**
   * Write a unsigned 16-bit integer (i16) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: number, endian?: Endianness | undefined | null): void
}

export declare class Int32 {
  /**
   * Read a unsigned 32-bit integer (i32) from the BinaryStream.
   */
  static read(stream: BinaryStream, endian?: Endianness | undefined | null): number
  /**
   * Write a unsigned 32-bit integer (i32) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: number, endian?: Endianness | undefined | null): void
}

export declare class Int64 {
  /**
   * Read a unsigned 64-bit integer (i64) from the BinaryStream.
   */
  static read(stream: BinaryStream, endian?: Endianness | undefined | null): bigint
  /**
   * Write a unsigned 64-bit integer (i64) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: bigint, endian?: Endianness | undefined | null): void
}

export declare class Int8 {
  /**
   * Read a unsigned 8-bit integer (i8) from the BinaryStream.
   */
  static read(stream: BinaryStream): number
  /**
   * Write a unsigned 8-bit integer (i8) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: number): void
}

export declare class String16 {
  /**
   * Read a 16-bit string from the BinaryStream.
   */
  static read(stream: BinaryStream, endian?: Endianness | undefined | null): string
  /**
   * Write a 16-bit string to the BinaryStream.
   */
  static write(stream: BinaryStream, value: string, endian?: Endianness | undefined | null): void
}

export declare class String32 {
  /**
   * Read a 32-bit string from the BinaryStream.
   */
  static read(stream: BinaryStream, endian?: Endianness | undefined | null): string
  /**
   * Write a 32-bit string to the BinaryStream.
   */
  static write(stream: BinaryStream, value: string, endian?: Endianness | undefined | null): void
}

export declare class Uint16 {
  /**
   * Read a unsigned 16-bit integer (u16) from the BinaryStream.
   */
  static read(stream: BinaryStream, endian?: Endianness | undefined | null): number
  /**
   * Write a unsigned 16-bit integer (u16) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: number, endian?: Endianness | undefined | null): void
}

export declare class Uint32 {
  /**
   * Read a unsigned 32-bit integer (u32) from the BinaryStream.
   */
  static read(stream: BinaryStream, endian?: Endianness | undefined | null): number
  /**
   * Write a unsigned 32-bit integer (u32) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: number, endian?: Endianness | undefined | null): void
}

export declare class Uint64 {
  /**
   * Read a unsigned 64-bit integer (u64) from the BinaryStream.
   */
  static read(stream: BinaryStream, endian?: Endianness | undefined | null): bigint
  /**
   * Write a unsigned 64-bit integer (u64) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: bigint, endian?: Endianness | undefined | null): void
}

export declare class Uint8 {
  /**
   * Read a unsigned 8-bit integer (u8) from the BinaryStream.
   */
  static read(stream: BinaryStream): number
  /**
   * Write a unsigned 8-bit integer (u8) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: number): void
}

export declare class VarInt {
  /**
   * Read a unsigned 32-bit variable length integer (u32) from the BinaryStream.
   */
  static read(stream: BinaryStream): number
  /**
   * Write a unsigned 32-bit variable length integer (u32) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: number): void
}

export declare class VarLong {
  /**
   * Read a unsigned 64-bit variable length integer (u64) from the BinaryStream.
   */
  static read(stream: BinaryStream): bigint
  /**
   * Write a unsigned 64-bit variable integer (u64) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: bigint): void
}

export declare class VarString {
  /**
   * Read a 32-bit variable length string from the BinaryStream.
   */
  static read(stream: BinaryStream): string
  /**
   * Write a 32-bit variable length string to the BinaryStream.
   */
  static write(stream: BinaryStream, value: string): void
}

export declare class ZigZag {
  /**
   * Read a unsigned 32-bit variable length integer (i32) from the BinaryStream.
   */
  static read(stream: BinaryStream): number
  /**
   * Write a unsigned 32-bit variable length integer (i32) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: number): void
}

export declare class ZigZong {
  /**
   * Read a signed 64-bit variable length integer (i64) from the BinaryStream.
   */
  static read(stream: BinaryStream): bigint
  /**
   * Write a signed 64-bit variable integer (i64) to the BinaryStream.
   */
  static write(stream: BinaryStream, value: bigint): void
}

export declare const enum Endianness {
  Big = 0,
  Little = 1
}
